// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name iNaviNavigationSdk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import iNaviNavigationSdk
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(InvView) @_Concurrency.MainActor @preconcurrency public class InvView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any iNaviNavigationSdk.InvViewProtocol)?
  @_Concurrency.MainActor @preconcurrency public func updateView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class InvMenuView : iNaviNavigationSdk.InvView {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(InvMenuLayer) @_Concurrency.MainActor @preconcurrency public class InvMenuLayer : iNaviNavigationSdk.InvMenuView {
  @objc @_Concurrency.MainActor @preconcurrency override public func updateView()
  @objc @_Concurrency.MainActor @preconcurrency public func startSpinMapBT(_ angle: Swift.Float)
  @objc deinit
}
extension iNaviNavigationSdk.InvMenuLayer : iNaviNavigationSdk.InvViewProtocol {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onTouchMapMode()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IARouteSearchModule) public class IARouteSearchModule : ObjectiveC.NSObject {
  @objc public static let shared: iNaviNavigationSdk.IARouteSearchModule
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ShiManager) public class ShiManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: iNaviNavigationSdk.ShiManager
  @objc public var isShiMode: Swift.Bool
  @objc public func loadShiData()
  @objc public func getShiManagerWarning(mmc: iNaviNavigationSdk.MMCModuleData, shiMember: iNaviNavigationSdk.INaviShiMember?, speed: ObjectiveC.NSInteger, isSimulMode: Swift.Bool) -> Swift.Int
  @objc public func getShiManagerNoDriveWarning() -> Swift.Bool
  @objc public func checkShiManagerDisasterWarning()
  @objc public func checkShiManagerStopAreaWarning(_ mmc: iNaviNavigationSdk.MMCModuleData)
  @objc public func getShiManagerNoWayPoint(_ shiWeightType: Swift.Int)
  public func getShiManagerNoWayPointEnterCheck(mmc: iNaviNavigationSdk.MMCModuleData) -> Swift.Bool
  @objc public func setShiGpsInfo(mmc: iNaviNavigationSdk.MMCModuleData, speed: ObjectiveC.NSInteger, angle: Swift.Int, pathVolnYn: Swift.Bool = false, shiMember: iNaviNavigationSdk.INaviShiMember?) -> Swift.Bool
  @objc public func getShiPoiData(_ name: Swift.String, bStart: Swift.Bool = true) -> iNaviNavigationSdk.INaviRoutePtItem?
  @objc public func getShiPoiDataAry(_ name: [Swift.String]) -> [iNaviNavigationSdk.INaviRoutePtItem]?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol InvViewProtocol {
  @objc optional func onMoveMapPostion(point: CoreFoundation.CGPoint)
  @objc optional func onClickMapIconPostion(point: CoreFoundation.CGPoint)
  @objc optional func onDrawGroupIcon(items: [iNaviNavigationSdk.InvGroupMember]?)
  @objc optional func onZoomToFitDrawIcon(items: [iNaviNavigationSdk.InvGroupMember]?, selectIndex: ObjectiveC.NSInteger)
  @objc optional func onZoomToFitDrawDetailIcon(items: [CoreFoundation.CGPoint]?, rectPosition: [CoreFoundation.CGPoint]?, selectIndex: ObjectiveC.NSInteger)
  @objc optional func updateInfoLayer()
  @objc optional func onTouchCurrentOn()
  @objc optional func onTouchZoomIn()
  @objc optional func onTouchZoomOut()
  @objc optional func onTouchCompass()
  @objc optional func onTouchVolume()
  @objc optional func onTouchMapMode()
  @objc optional func onTouchReRoute()
  @objc optional func onTouchMenu()
  @objc optional func onTouchMain()
  @objc optional func onTouchGuideCancel()
}
@_inheritsConvenienceInitializers @objc public class InvGroupMember : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class optimalPosition : ObjectiveC.NSObject, Swift.Codable {
  @objc public var x: Swift.String
  @objc public var y: Swift.String
  @objc public var type: Swift.Int
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension ObjectiveC.NSObject {
  public class var className: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(INVCommon) public class INVCommon : ObjectiveC.NSObject {
  @objc public static let sharedInstance: iNaviNavigationSdk.INVCommon
  @objc public func getOptimalPosition(_ posx: Swift.String, posy: Swift.String, completionHandler: @escaping ([iNaviNavigationSdk.optimalPosition]?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(InvGuideLayer) @_Concurrency.MainActor @preconcurrency public class InvGuideLayer : iNaviNavigationSdk.InvView {
  @objc @_Concurrency.MainActor @preconcurrency override public func updateView()
  @objc @_Concurrency.MainActor @preconcurrency public func layoutVisbleUpdate()
  @objc @_Concurrency.MainActor @preconcurrency public func settingLeftSafeArea(_ padding: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor @preconcurrency public func settingRightSafeArea(_ padding: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor @preconcurrency public func setTbtColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func setNextTbtColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func updateGuideInfos(_ turnInfo: iNaviNavigationSdk.GuideTurnInfo?, nextTurnInfo: iNaviNavigationSdk.GuideTurnInfo?, laneInfo: iNaviNavigationSdk.GuideLaneInfo?, roadType road_type: iNaviNavigationSdk.ROAD_TYPE, isSimulationMode: Swift.Bool, isZoomVisible: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func updateMMCInfo(_ mmcInfo: iNaviNavigationSdk.IAMMCDataInfo?, mmcModuleData MMCModuleData: iNaviNavigationSdk.MMCModuleData?, isSimulationMode: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func update(_ camInfo: iNaviNavigationSdk.GuideCamInfo?, safeInfo: iNaviNavigationSdk.GuideSafeInfo?, roadType roadtype: iNaviNavigationSdk.ROAD_TYPE, nowSpeed speed: Swift.Int, isSimulationMode: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func highWayInfoList(_ highWayInfoList: [iNaviNavigationSdk.GuideHigiwayInfo]?, isHighWayInfo: Foundation.NSNumber?, isZoomVisible: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func didRealEndInfo()
  @objc @_Concurrency.MainActor @preconcurrency public func updateVmsView(_ vid: Swift.String?, msg: Swift.String?)
  @objc @_Concurrency.MainActor @preconcurrency public func updateProgressBar(_ percent: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func getBottomHeight() -> CoreFoundation.CGFloat
  @objc deinit
}
extension iNaviNavigationSdk.InvGuideLayer : iNaviNavigationSdk.InvViewProtocol {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onTouchMain()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onTouchMenu()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onTouchGuideCancel()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onTouchVolume()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onTouchReRoute()
}
